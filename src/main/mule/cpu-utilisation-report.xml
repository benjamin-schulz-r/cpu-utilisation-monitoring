<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:java="http://www.mulesoft.org/schema/mule/java" xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    <http:listener-config name="cpu-utilisation-report-httpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="8081" />
    </http:listener-config>
    <apikit:config name="cpu-utilisation-report-config" api="resource::fd1d505c-1f68-4f15-aabe-6a06c6532844:cpu-usage-api:1.0.0:raml:zip:cpu-utilisation-report.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" disableValidations="true"/>
    <http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="68e6b0b0-85c5-44b0-9264-60a6204abc81" basePath="/accounts/api/organizations/" >
		<http:request-connection protocol="HTTPS" host="${Anypoint.URL}" port="443" />
	</http:request-config>
	<http:request-config name="HTTP_Request_configuration1" doc:name="HTTP Request configuration" doc:id="ea36e0c1-021d-4470-a651-5b3e4e6192f6" basePath="/accounts/api/v2/oauth2/token" enableCookies="false" >
		<http:request-connection protocol="HTTPS" host="${Anypoint.URL}" />
	</http:request-config>
	<http:request-config name="HTTP_Request_configuration2" doc:name="HTTP Request configuration" doc:id="d936ebd5-f70d-4b03-8242-85285bbd5eab" basePath="/cloudhub/api/v2/applications/" >
		<http:request-connection protocol="HTTPS" host="${Anypoint.URL}" port="443" connectionIdleTimeout="60000"/>
	</http:request-config>
	<http:request-config name="HTTP_Request_configuration3" doc:name="HTTP Request configuration" doc:id="694d4691-cc50-45a6-b20d-3fa5dec7f54a" basePath="/cloudhub/api/v2/applications" >
		<http:request-connection protocol="HTTPS" host="${Anypoint.URL}" port="443" />
	</http:request-config>
	
	<validation:config name="Validation_Config" doc:name="Validation Config" doc:id="e7b8019f-2830-42a1-b9d0-0cf5f4dcd13a"/>
	<flow name="cpu-utilisation-report-main">
        <http:listener config-ref="cpu-utilisation-report-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="cpu-utilisation-report-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="cpu-utilisation-report-console">
        <http:listener config-ref="cpu-utilisation-report-httpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="cpu-utilisation-report-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="cpu-utilisation-reportFlow-callStats" doc:id="d37a0a1c-588f-47e2-938f-6beb58723b4c" >
		<until-successful maxRetries="5" doc:name="Until Successful" doc:id="2effb787-8897-4937-b3b2-0dfa6d689620" millisBetweenRetries="30000">
			<logger level="INFO" doc:name="Logger" doc:id="597fab3b-85cc-4ed9-bcbc-581305d1b91e" message='#[payload.domain ++ " HTTP Trying..."]'/>
			<http:request method="GET" doc:name="Request Stats" doc:id="004d4251-400a-441c-a8c2-2273272e7209" config-ref="HTTP_Request_configuration2" path='#[payload.domain ++ "/dashboardStats"]' responseTimeout="240000" target="workerStats">
					<http:headers><![CDATA[#[output application/java
---
{
	"X-ANYPNT-ENV-ID" : vars["ENV-ID"],
	"Authorization" : "Bearer " ++ vars.access_token,
//	"XSRF-TOKEN" : vars."XSRF-TOKEN",
	"X-ANYPNT-ORG-ID" : vars."X-ANYPNT-ORG-ID"
}]]]></http:headers>
					<http:query-params><![CDATA[#[output application/java
---
{
	"endDate" : vars["endDate"],
	"startDate" : vars["startDate"],
	"interval" : vars["interval"],
	"statistics" : "cpu"
}]]]></http:query-params>
			</http:request>
		</until-successful>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="12e65296-4632-4518-ad3d-12addae37a0e" >
				<logger level="INFO" doc:name="Logger" doc:id="9aecad3e-778d-4f1b-947f-aabce2f6b563" message="ERROR!"/>
			</on-error-continue>
		</error-handler>
		
	</flow>
	<flow name="cpu-utilisation-get-business-groups" doc:id="7ff41495-8f7b-4d8c-a83f-0defa45f653f" >
		<http:request method="GET" doc:name="Request Business Groups" doc:id="720c5f97-6269-48cf-a1f9-0d7dc5bbcce2" config-ref="HTTP_Request_configuration" path='#[vars."X-ANYPNT-ORG-ID"]' responseTimeout="600000">
			<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.access_token
}]]]></http:headers>
		</http:request>
		<ee:transform doc:name="Transform Message" doc:id="85f027f1-bf49-4b54-8992-342aae57ed55" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.subOrganizationIds as Array<String>]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="totalVCoresProd" ><![CDATA[%dw 2.0
output application/java
---
if (payload.isMaster) payload.entitlements.vCoresProduction.assigned as Number
else vars.totalVCoresProd]]></ee:set-variable>
				<ee:set-variable variableName="totalVCoresSandbox" ><![CDATA[%dw 2.0
output application/java
---
if (payload.isMaster) payload.entitlements.vCoresSandbox.assigned as Number
else vars.totalVCoresSandbox]]></ee:set-variable>
				<ee:set-variable variableName="totalVCoresDesign" ><![CDATA[%dw 2.0
output application/java
---
if (payload.isMaster) payload.entitlements.vCoresDesign.assigned as Number
else vars.totalVCoresDesign]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="ab1d1574-02af-4cfb-a597-36f4a686bbd6" >
			<when expression="#[sizeOf(payload) == 0]">
				<logger level="INFO" doc:name="Logger" doc:id="41515973-363d-40c5-bd51-2ab55237517a" />
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="9483922d-8d97-46be-8603-9ead5f4c9a51">
			<ee:message>
			</ee:message>
					<ee:variables >
						<ee:set-variable variableName="final_list_of_business_groups" ><![CDATA[%dw 2.0
output application/java
var list = [vars."final_list_of_business_groups"]
---
list ++ payload]]></ee:set-variable>
					</ee:variables>
		</ee:transform>
				<foreach doc:name="For Each" doc:id="c72594ef-5eae-4b85-aba2-bd153de54ef1" collection="#[payload]">
					<ee:transform doc:name="Transform Message" doc:id="7ffba688-3d26-4b7c-9fe8-988ee38f86c6" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="X-ANYPNT-ORG-ID" ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<flow-ref doc:name="Flow Reference" doc:id="5661b28b-1e6c-4447-9a10-3e21065a6af8" name="cpu-utilisation-get-business-groups" />
				</foreach>
			</otherwise>
		</choice>
	</flow>
	<flow name="get:\(X-ANYPNT-ORG-ID)\cpu:cpu-utilisation-report-config">
        <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" doc:name="Set queryParams as variables">
            <ee:variables>
                <ee:set-variable variableName="X-ANYPNT-ORG-ID"><![CDATA[attributes.uriParams.'X-ANYPNT-ORG-ID']]></ee:set-variable>
				<ee:set-variable variableName="startDate"><![CDATA[%dw 2.0
output application/json
---
//attributes.queryParams["startDate"]
if (attributes.queryParams["startDate"] == null) (now() - |PT1H|) else  (attributes.queryParams["startDate"])]]></ee:set-variable>
				<ee:set-variable variableName="endDate"><![CDATA[%dw 2.0
output application/json
---
//attributes.queryParams["endDate"]
if (attributes.queryParams["endDate"] == null) (now()) else  (attributes.queryParams["endDate"])]]></ee:set-variable>
				<ee:set-variable variableName="interval"><![CDATA[%dw 2.0
output application/java
---
attributes.queryParams["interval"]]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <http:request method="POST" doc:name="Request LOGIN" doc:id="50469a12-b7cb-4022-bb45-3641ddce81e8" config-ref="HTTP_Request_configuration1" path="/" outputMimeType="application/json" responseTimeout="600000">
			<http:body><![CDATA[#[%dw 2.0
import * from dw::core::Arrays
output application/x-www-form-urlencoded
var client_id = Mule::p('Anypoint.ConnectedApp.client_id')
var client_secret = Mule::p('Anypoint.ConnectedApp.client_secret')
---
{
   "client_id" : client_id,
   "client_secret" : client_secret,
   "grant_type" : "client_credentials"
}]]]></http:body>
			<http:headers><![CDATA[#[output application/java
---
{
	"Accept" : "application/json",
	"Content-Type" : "application/x-www-form-urlencoded"
}]]]></http:headers>
		</http:request>
		
		<ee:transform doc:name="Transform Message" doc:id="42b38a3e-65bd-4944-973c-9fc8ccbeab4a">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="access_token"><![CDATA[%dw 2.0
output application/java
---
payload.access_token
]]></ee:set-variable>
				<ee:set-variable variableName="XSRF-TOKEN"><![CDATA[%dw 2.0
output application/java
---
((attributes.headers[7] splitBy(/[;\/]/))[0] splitBy(/[=\/]/))[1]
]]></ee:set-variable>
				<ee:set-variable variableName="final_list"><![CDATA[%dw 2.0
output application/java
---
null]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="0590155e-6d61-4ed4-bfa5-23d75f6fbd79" message="#[vars]" />
		<ee:transform doc:name="Transform Message" doc:id="d4221825-ae44-477d-aca8-01abc387f04f">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="final_list_of_business_groups"><![CDATA[%dw 2.0
output application/java
---
vars."X-ANYPNT-ORG-ID"]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="Flow Reference Get all business groups" doc:id="f3575c4b-f6dc-4aa2-a2a4-18738b17bd0d" name="cpu-utilisation-get-business-groups" />
		<ee:transform doc:name="Transform Message" doc:id="4f873875-f041-48d0-b7f3-cdc1d4d9df19">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="final_list_of_business_groups"><![CDATA[%dw 2.0
output application/java
---
flatten(vars.final_list_of_business_groups)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<foreach doc:name="For Each business group" doc:id="7807b418-1af3-4162-8613-320a60dd4a3c" collection="#[vars.final_list_of_business_groups]">
			<ee:transform doc:name="Transform Message" doc:id="acc18887-8c34-42e6-87fd-bfd1a29064ee">
				<ee:message>
				</ee:message>
				<ee:variables>
					<ee:set-variable variableName="X-ANYPNT-ORG-ID"><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<http:request method="GET" doc:name="Request Environments" doc:id="b8aa4e5b-73f7-4b1f-9622-1e7581c3fd47" config-ref="HTTP_Request_configuration" path='#[vars."X-ANYPNT-ORG-ID"]' responseTimeout="600000">
			<http:headers><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.access_token
}]]]></http:headers>
		</http:request>
			<ee:transform doc:name="Transform Message" doc:id="9e02e436-4c0a-41f3-bff9-3e94a76df5b9">
				<ee:message>
				</ee:message>
				<ee:variables>
					<ee:set-variable variableName="environments"><![CDATA[%dw 2.0
output application/java
---
payload.environments]]></ee:set-variable>
					<ee:set-variable variableName="businessGroup"><![CDATA[%dw 2.0
output application/java
---
payload.name]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<foreach doc:name="For Each Environment" doc:id="ce6debaf-f1a5-44cf-a76a-2f08b8e335a6" collection="#[vars.environments]">
			<ee:transform doc:name="Transform Message" doc:id="0fed7cdb-d78a-45af-b460-7e43e7fcf480">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
				</ee:message>
				<ee:variables>
					<ee:set-variable variableName="ENV-ID"><![CDATA[%dw 2.0
output application/java
---
payload.id]]></ee:set-variable>
					<ee:set-variable variableName="ENV-NAME"><![CDATA[%dw 2.0
output application/java
---
payload.name]]></ee:set-variable>
					<ee:set-variable variableName="ENV-TYPE"><![CDATA[%dw 2.0
output application/java
---
payload."type"]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<!-- 
			<logger level="INFO" doc:name="Logger" doc:id="92532c27-6b6c-4e50-ac00-d5d02122af88" message='#[vars["ENV-NAME"]]' />
			 -->
			<http:request method="GET" doc:name="Request all the applications" doc:id="b89ef5fa-47d9-4cda-b8a2-f1f2c680e1e2" config-ref="HTTP_Request_configuration3" path="/" target="applications" responseTimeout="600000">
				<http:headers><![CDATA[#[output application/java
---
{
	"X-ANYPNT-ENV-ID" : vars["ENV-ID"],
	"Authorization" : "Bearer " ++ vars.access_token
}]]]></http:headers>
				<http:query-params><![CDATA[#[output application/java
---
{
	"retrieveStatistics" : false,
	"retrieveIpAddresses" : false,
	"retrieveLogLevels" : false,
	"retrieveTrackingSettings" : false
}]]]></http:query-params>
			</http:request>
			   <!-- 
			<logger level="INFO" doc:name="Logger" doc:id="b8663561-65b2-4182-9e28-4f8be1049903" message="#[vars.applications.domain]"/>
			   -->
			<foreach doc:name="For Each Application" doc:id="16d3b5d7-70b9-4f97-a1b1-30697d448ef5" collection="#[vars.applications]">
				<ee:transform doc:name="Transform Message" doc:id="5b79e6db-78d5-47d6-b7da-923bd2601760">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="application-name"><![CDATA[%dw 2.0
output application/java
---
payload.domain]]></ee:set-variable>
						<ee:set-variable variableName="application-worker-type"><![CDATA[%dw 2.0
output application/java
---
payload.workers."type".weight
]]></ee:set-variable>
						<ee:set-variable variableName="application-worker-amount"><![CDATA[%dw 2.0
output application/java
---
payload.workers.amount]]></ee:set-variable>
						<ee:set-variable variableName="application-status"><![CDATA[%dw 2.0
output application/java
---
payload.status]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="Flow Reference callAppCpuStats" doc:id="bd0f9ede-093e-4d69-b398-b4442cab7ee6" name="cpu-utilisation-reportFlow-callStats" />
				<logger level="INFO" doc:name="Logger" doc:id="e15a3720-de9c-4c0c-a701-ef92d48247bc" message="#[vars.workerStats]" />
				<ee:transform doc:name="Transform Message" doc:id="f36c73bb-76b4-472f-ae95-5d2ef33bc598">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"application" : vars."application-name",
	"environment" : vars."ENV-NAME",
	"environmentType" : vars."ENV-TYPE",
	"businessGroup" : vars.businessGroup,
	"workerType" : vars."application-worker-type",
	"workerAmount" : vars."application-worker-amount",
	"status"  : vars."application-status",

	"averageCPUUtilisation" : if (vars.workerStats.workerStatistics.statistics != null ) (((vars.workerStats.workerStatistics.statistics.cpu)[0] pluck (value,key)  -> {
					Value: value
				}).Value[0]) else 0,
	"endDate" : vars.endDate,
	"startDate" : vars.startDate
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<choice doc:name="Choice" doc:id="1e8f047a-ebf8-475e-b740-69e756d8fbc3">
					<when expression='#[payload.status == "STARTED"]'>
						<ee:transform doc:name="Transform Message" doc:id="117b1b56-c9ef-4358-b3f4-311afb9cd082">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="final_list"><![CDATA[%dw 2.0
output application/json
var list = [vars."final_list"]
---
(flatten(list) << payload )map $ filter $ != null]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
					</when>
				</choice>
				<!--   
				<logger level="INFO" doc:name="Logger" doc:id="937deaa1-b65c-46d9-a894-f7cfbd6d2694" message="#[payload]"/>
				  -->
			</foreach>
			 
		</foreach>
		</foreach>
		<ee:transform doc:name="Transform Message" doc:id="a215ec16-61f2-424e-862d-08e9a6a4fdd0">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---

//order the list of mule apps desc by CPU Utilisation
vars.final_list orderBy(-$.averageCPUUtilisation) groupBy($.environmentType)

//order the list of mule apps desc by largest core utilization
//vars.final_list orderBy(-$.workerAmount * $.workerType) groupBy($.environmentType)
//vars.final_list orderBy(-$.workerAmount * $.workerType) groupBy($.environmentType)
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="accumulatorVar"><![CDATA[%dw 2.0
output application/java
---
{
	intKeyNameDesign : 0,
	intKeyNameSandbox : 0,
	intKeyNameProduction : 0
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="130ec4c2-f51d-4d80-babd-11de06dbc09d">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
fun accumulateValues (varName, keyName, add) = 
using (addValue = 
     Java::invoke(			                   //invoke java.util.HashMap
	    'java.util.HashMap',
    'put(Object,Object)',	                         //method used to add values
	     varName,                               //variable for accumulating values
		  {								
		     arg0: keyName,                                          // key name
		     arg1: add( Java::invoke(              //add to accumulator variable
                    'java.util.HashMap',
                    'get(Object)',                         //method used to get value
                     varName,
                     {arg0: keyName}
                                )
          			         )
				           }
			            )
		             )
 Java::invoke('java.util.HashMap', 'get(Object)', varName, {arg0: keyName})  //return
---
//This counts the number of cores that each application has. The payload is already ordered by desc by the highest cpu core utilization. So the top application will be the ones using the normal contract
{
	sandbox: payload.sandbox map (value,index) -> {
				"item": value,
				"Total" : accumulateValues (
			vars.accumulatorVar, 'intKeyNameSandbox', (accVar) -> accVar + (value.workerAmount*value.workerType)
			       )
			    },
	design: payload.design map (value,index) -> {
				"item": value,
				"Total" : accumulateValues (
			vars.accumulatorVar, 'intKeyNameDesign', (accVar) -> accVar + (value.workerAmount*value.workerType)
			       )
			    },
	production: payload.production map (value,index) -> {
				"item": value,
				"Total" : accumulateValues (
			vars.accumulatorVar, 'intKeyNameProduction', (accVar) -> accVar + (value.workerAmount*value.workerType)
			       )
			    }
}


//https://iwconnect.com/how-to-accumulate-and-modify-values-into-variable-using-mule-4-and-dataweave-2/]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="f9a12265-231e-44b0-aab4-6cbabc684ae1">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Arrays
var prod_cores_normal_contract = Mule::p('customer.prod_cores_normal_contract')
var sanbox_cores_normal_contract = Mule::p('customer.sandbox_cores_normal_contract')
var design_cores_normal_contract = Mule::p('customer.design_cores_normal_contract')
---
//this splits the array into left side and right side. The left side has the application using the normal contract, the right side has the microservices contract. 
//The total number of cores in the normal contract is specified below for each type of environment.
{
	production: (payload.production default []) splitWhere ($.Total > prod_cores_normal_contract) ++ {totalVCoresProduction: vars.totalVCoresProd},
	design: (payload.design default []) splitWhere ($.Total > design_cores_normal_contract)  ++ {totalVCoresDesign: vars.totalVCoresDesign},
	sandbox: (payload.sandbox default []) splitWhere ($.Total > sanbox_cores_normal_contract)  ++ {totalVCoresSandBox: vars.totalVCoresSandbox}
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="32c74f29-bb52-45e8-b28a-3f83e1857ab5" message="Done calling the APIs" />
		 
    </flow>
</mule>
